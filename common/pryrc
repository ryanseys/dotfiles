Pry.editor = 'code'
Pry.config.color = true

$LOAD_PATH << "~/.gem/ruby/3.1.2/gems/awesome_print-1.9.2/lib/"

begin
  require 'awesome_print'

  # The following line enables awesome_print for all pry output,
  # and it also enables paging
  Pry.config.print = proc {|output, value| Pry::Helpers::BaseHelpers.stagger_output("=> #{value.ai}", output)}

  # If you want awesome_print without automatic pagination, use the line below
  module AwesomePrint
    Formatter.prepend(Module.new do
      def awesome_self(object, type)
        if type == :string && @options[:string_limit] && object.inspect.to_s.length > @options[:string_limit]
          colorize(object.inspect.to_s[0..@options[:string_limit]] + "...", type)
        else
          super(object, type)
        end
      end
    end)
  end

  AwesomePrint.pry!
rescue LoadError => err
  puts "gem install awesome_print  # <-- highly recommended"
end

Pry.commands.alias_command 'c', 'continue' rescue nil
Pry.commands.alias_command 's', 'step' rescue nil
Pry.commands.alias_command 'n', 'next' rescue nil

puts "Hey Ryan! ðŸ¤ª Welcome to Pry! Type 'help' if you get lost.\n"

if Object.const_defined?("FactoryBot")
  include FactoryBot::Syntax::Methods

  puts "FactoryBot methods (e.g. create / build) are available!"
end

#if Object.const_defined?("Rails")
#  include Rails.application.routes.url_helpers
#
#  puts "Rails url helpers automatically included! i.e. Rails.application.routes.url_helpers"
#end

# === HISTORY ===
Pry::Commands.command /^$/, "repeat last command" do
  _pry_.run_command Pry.history.to_a.last
end

# === Listing config ===
# Better colors - by default the headings for methods are too
# similar to method name colors leading to a "soup"
# These colors are optimized for use with Solarized scheme
# for your terminal
Pry.config.ls.separator = "\n" # new lines between methods
Pry.config.ls.heading_color = :magenta
Pry.config.ls.public_method_color = :green
Pry.config.ls.protected_method_color = :yellow
Pry.config.ls.private_method_color = :bright_black
