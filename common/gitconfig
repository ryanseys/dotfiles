[alias]
  # `git back` to switch back to previous branch
  back = checkout -
  # `git rmbr my-branch` deletes the branch named my-branch.
  rmbr = branch -D
  # `git now-many 5` amends the last 5 commits with the current time.
  now-many = rebase HEAD~${1} --exec "git commit --amend --no-edit --date 'now'"
  # `git now` amends the current commit with the current time.
  now = commit --amend --reset-author --no-edit
  # `git open` opens the current branch in github
  open = !zsh -c 'source $HOME/.aliases && git-open'
  # `git pick` lets you choose files to add
  pick = "!git ls-files -m -o --exclude-standard | fzf --print0 -m | xargs -0 -t -o git add"
  # `git tree` will print a pretty tree of commits of the current branch
  tree = "log --all --decorate --oneline --graph"
  # `git track` will set the upstream to origin/<branch name>
  track = "!git branch --set-upstream-to=origin/`git symbolic-ref --short HEAD`"
  # `git pow` to amend staged changes and pushf
  pow = "!fn() { git add --all && git commit --amend --no-edit && git push --force-with-lease; }; fn"
  # `git fixup-pick` to pick a commit to fixup
  fixup-pick = "!git log -n 30 --pretty=format:'%h %s' --no-merges | fzf | cut -c -7 | xargs -o git commit --fixup"
  # `git fixup-done <branch this branch is based on>` to finish fixup
  fixup-done = "!git rebase -i --autosquash"
  # `git files bd61ad98` to list files in a given commit
  files = diff-tree --no-commit-id --name-only -r
  # `git squash N` squashes N commits
  squash = "!f(){ git reset --soft HEAD~${1} && git commit --edit -m\"$(git log --format=%B --reverse HEAD..HEAD@{1})\"; };f"
  lg = log --pretty=format:'%Cred%h%Creset -%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --no-merges
  # `git file-history path/to/file.rb` to find all commits on a particular file
  file-history = log --all --full-history --summary --no-merges --full-diff --
  st = status -sb
  cm = commit -m
  aa = add --all
  co = checkout
  cp = cherry-pick
  master = checkout master
  main = checkout main
  new = checkout -b
  amend = commit --amend --no-edit
  branches = branch -l
  brs = branch -l
  undo = reset --soft HEAD~1
  cleanup = clean -df
  pushf = push --force-with-lease --force-if-includes
  diffc = diff --cached
  # `git amend-to <SHA>` to amend staged changes to a particular commit
	amend-to = "!f() { SHA=`git rev-parse \"$1\"`; git stash -k && git commit --fixup \"$SHA\" && GIT_SEQUENCE_EDITOR=true git rebase --interactive --autosquash \"$SHA^\" && git stash pop; }; f"
  remotes = "remote -v"
  currentbranch = "!git branch --contains HEAD | grep '*' | tr -s ' ' | cut -d ' ' -f2"
[color]
  diff = auto
  status = auto
  branch = auto
[branch]
  autosetuprebase = always
[push]
	default = current
[filter "lfs"]
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
[user]
  # These are set in .gitconfig_local
[core]
	editor = vim
	excludesfile = /Users/ryanseys/.gitignore_global
  fsmonitor = true # monitor file system for changes https://github.blog/2022-06-29-improve-git-monorepo-performance-with-a-file-system-monitor/
  untrackedCache = true # cache untracked files in memory to speed up git status https://github.blog/2022-06-29-improve-git-monorepo-performance-with-a-file-system-monitor/
[pull]
	rebase = true
[init]
	defaultBranch = main
[remote "origin"]
	prune = true
[rebase]
	autoStash = true
	autosquash = true
[fetch]
	prune = true
[include]
  path = ~/.gitconfig_local
[gpg]
	program = /opt/homebrew/bin/gpg
	format = ssh
[commit]
	gpgsign = true
	template = /Users/ryanseys/.gitmessage
