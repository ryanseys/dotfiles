[alias]
  track = "!git branch --set-upstream-to=origin/`git symbolic-ref --short HEAD`" # git track will set the upstream to origin/<branch name>
  pow = "!fn() { git add --all && git commit --amend --no-edit && git push --force-with-lease; }; fn" # amend and pushf
  fixup = "!zsh -c 'source $HOME/.aliases && fixup'"
  fixup-choose = "!git log -n 50 --pretty=format:'%h %s' --no-merges | fzf | cut -c -7 | xargs -o git commit --fixup"
  files = diff-tree --no-commit-id --name-only -r # 'git files bd61ad98' to list files in a given commit
  squash = "!f(){ git reset --soft HEAD~${1} && git commit --edit -m\"$(git log --format=%B --reverse HEAD..HEAD@{1})\"; };f" # 'git squash N' squashes N commits
  lg = log --pretty=format:'%Cred%h%Creset -%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --no-merges
  file-history = log --all --full-history --summary --no-merges --full-diff -- # 'git file-history path/to/file.rb' to find all commits on a particular file
  st = status -sb
  cm = commit -m
  aa = add --all
  co = checkout
  cp = cherry-pick
  master = checkout master
  main = checkout main
  new = checkout -b
  amend = commit --amend --no-edit
  branches = branch -l
  undo = reset --soft HEAD~1
  cleanup = clean -df
  pushf = push --force-with-lease
  diffc = diff --cached
	amend-to = "!f() { SHA=`git rev-parse \"$1\"`; git stash -k && git commit --fixup \"$SHA\" && GIT_SEQUENCE_EDITOR=true git rebase --interactive --autosquash \"$SHA^\" && git stash pop; }; f"
[color]
  diff = auto
  status = auto
  branch = auto
[branch]
  autosetuprebase = always
[push]
	default = current
[filter "lfs"]
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
[user]
	name = Ryan Seys
	email = ryan.seys@shopify.com
[core]
	editor = vim
	excludesfile = ~/.gitignore_global
[pull]
	rebase = true
[init]
	defaultBranch = main
[remote "origin"]
	prune = true
[rebase]
	autoStash = true
	autosquash = true
[fetch]
	prune = true
[include]
	path = /Users/ryanseys/.config/dev/gitconfig
[gpg]
	program = /opt/homebrew/bin/gpg
[commit]
	gpgsign = false
	template = /Users/ryanseys/.gitmessage
